// E2E Test Results Documentation Template

const generateTestReport = (testResults) => {
  const timestamp = new Date().toISOString();
  const validTests = testResults.filter(t => !t.testName.includes('ERROR'));
  const errorTests = testResults.filter(t => t.testName.includes('ERROR'));
  
  const report = `
# CV Tailoring Tool - End-to-End Test Report

**Test Execution Date:** ${timestamp}  
**Total Tests:** ${testResults.length}  
**Environment:** Production Edge Function  

## Executive Summary

${validTests.every(t => t.success && (!t.score || t.score >= 70)) && errorTests.every(t => t.success) 
  ? '✅ **ALL TESTS PASSED** - CV Tailoring Tool is functioning correctly'  
  : '⚠️ **SOME TESTS FAILED** - Issues detected requiring attention'
}

## Test Results Overview

### Valid CV Tailoring Tests
- **Total:** ${validTests.length}
- **Passed:** ${validTests.filter(t => t.success && (!t.score || t.score >= 70)).length}
- **Failed:** ${validTests.filter(t => !t.success || (t.score && t.score < 70)).length}

### Error Handling Tests  
- **Total:** ${errorTests.length}
- **Passed:** ${errorTests.filter(t => t.success).length}
- **Failed:** ${errorTests.filter(t => !t.success).length}

## Detailed Test Results

${testResults.map(result => `
### ${result.testName}
- **Status:** ${result.success ? '✅ PASS' : '❌ FAIL'} (HTTP ${result.status})
- **Duration:** ${result.duration || 'N/A'}
${result.score ? `- **Quality Score:** ${result.score}%` : ''}
${result.outputLength ? `- **Output Length:** ${result.outputLength} characters` : ''}
${result.error ? `- **Error:** ${result.error}` : ''}
${result.requestId ? `- **Request ID:** ${result.requestId}` : ''}

${result.beforeCV && result.afterCV ? `
**Before/After Comparison:**
\`\`\`
BEFORE: ${result.beforeCV}
AFTER:  ${result.afterCV}
\`\`\`` : ''}
`).join('')}

## Acceptance Criteria Verification

| Criteria | Status | Notes |
|----------|--------|--------|
| All 3 valid test cases produce polished CV | ${validTests.every(t => t.success && (!t.score || t.score >= 70)) ? '✅ PASS' : '❌ FAIL'} | Quality scores and structure validation |
| Malformed input triggers safe handling | ${errorTests.every(t => t.success) ? '✅ PASS' : '❌ FAIL'} | Error codes and user-friendly messages |
| No non-2xx responses on valid inputs | ${validTests.every(t => t.status === 200) ? '✅ PASS' : '❌ FAIL'} | HTTP status code validation |
| Generated CVs are download-ready | ${validTests.every(t => t.outputLength > 500) ? '✅ PASS' : '❌ FAIL'} | Sufficient content for export |

## Performance Metrics

${validTests.length > 0 ? `
- **Average Processing Time:** ${Math.round(validTests.reduce((sum, t) => sum + parseInt(t.duration?.replace('ms', '') || 0), 0) / validTests.length)}ms
- **Fastest Response:** ${Math.min(...validTests.map(t => parseInt(t.duration?.replace('ms', '') || 0)))}ms  
- **Slowest Response:** ${Math.max(...validTests.map(t => parseInt(t.duration?.replace('ms', '') || 0)))}ms
` : 'No performance data available'}

## Quality Analysis

${validTests.length > 0 ? `
- **Average Quality Score:** ${Math.round(validTests.reduce((sum, t) => sum + (t.score || 0), 0) / validTests.length)}%
- **Highest Score:** ${Math.max(...validTests.map(t => t.score || 0))}%
- **Lowest Score:** ${Math.min(...validTests.map(t => t.score || 0))}%
` : 'No quality data available'}

## Recommendations

${validTests.some(t => !t.success) ? `
### Issues to Address:
${validTests.filter(t => !t.success).map(t => `- ${t.testName}: ${t.error}`).join('\n')}
` : ''}

${errorTests.some(t => !t.success) ? `
### Error Handling Issues:
${errorTests.filter(t => !t.success).map(t => `- ${t.testName}: Expected proper error handling`).join('\n')}
` : ''}

### Next Steps:
1. ${validTests.every(t => t.success) ? 'All valid tests passing - monitor production performance' : 'Fix failing valid test cases'}
2. ${errorTests.every(t => t.success) ? 'Error handling working correctly' : 'Improve error handling for edge cases'}
3. Monitor quality scores and user feedback for continuous improvement
4. Consider performance optimization if processing times exceed 30 seconds

---
*Report generated by CV Tailoring E2E Test Suite*
`;

  return report;
};

window.generateTestReport = generateTestReport;

console.log('📊 Test Report Generator Loaded!');
console.log('Use generateTestReport(testResults) to create formatted documentation');